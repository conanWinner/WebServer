package org.webserver.gui;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import jnafilechooser.api.JnaFileChooser;
import org.webserver.core.Client;
import org.webserver.dto.ApiConstructor;
import org.webserver.dto.request.CreateWebServiceRequest;

import javax.swing.*;
import java.io.DataOutputStream;
import java.io.File;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Objects;

public class CreateWebServiceGUI extends javax.swing.JFrame {
    private Client client;
    private WebServiceGUI webServiceGUI;
    private File fileUpload = null;
    private String username;

    /**
     * Creates new form NewWebServiceGUI
     */
    public CreateWebServiceGUI(WebServiceGUI webServiceGUI, Client client, String username) {
        initComponents();
        this.webServiceGUI = webServiceGUI;
        this.client = client;
        this.username = username;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtServiceName = new javax.swing.JTextField();
        txtDomainName = new javax.swing.JTextField();
        txtSubdomain = new javax.swing.JTextField();
        txtPort = new javax.swing.JTextField();
        btnUploadFile = new javax.swing.JButton();
        btnConfirm = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }

            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel1.setText("Domain name:");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setText("Service name:");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel3.setText("Subdomain for your website:");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel4.setText("Port:");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel5.setText("Deploy source:");

        txtDomainName.setEditable(false);
        txtDomainName.setText("*.hosting.com");

        txtPort.setEditable(false);
        txtPort.setText("81");

        btnUploadFile.setText("Upload file");
        btnUploadFile.setText("Upload file");
        btnUploadFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUploadFileActionPerformed(evt);
            }
        });

        btnConfirm.setText("Confirm");
        btnConfirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    btnConfirmActionPerformed(evt);
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(35, 35, 35)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                                .addGap(18, 18, 18)
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(txtServiceName)
                                                                        .addComponent(txtDomainName)))
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                                        .addComponent(jLabel3)
                                                                        .addGroup(layout.createSequentialGroup()
                                                                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                                .addComponent(txtPort)))
                                                                .addGap(18, 18, 18)
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                                        .addGroup(layout.createSequentialGroup()
                                                                                .addComponent(jLabel5)
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                                .addComponent(btnUploadFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                                        .addComponent(txtSubdomain, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                .addGap(2, 2, 2))))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(159, 159, 159)
                                                .addComponent(btnConfirm, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap(34, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(51, 51, 51)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel1)
                                        .addComponent(txtDomainName, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel2)
                                        .addComponent(txtServiceName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel3)
                                        .addComponent(txtSubdomain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(btnUploadFile, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(jLabel4)
                                                .addComponent(txtPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jLabel5)))
                                .addGap(36, 36, 36)
                                .addComponent(btnConfirm, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                                .addGap(38, 38, 38))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[]{txtDomainName, txtPort, txtServiceName, txtSubdomain});

        pack();
    }// </editor-fold>

    private void formWindowClosed(java.awt.event.WindowEvent evt) {
        // TODO add your handling code here:
    }

    private void formWindowClosing(java.awt.event.WindowEvent evt) {
        this.setVisible(false);
        this.webServiceGUI.setEnabled(true);
        this.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        this.dispose();
    }

    private void btnConfirmActionPerformed(java.awt.event.ActionEvent evt) throws IOException {
        String serviceName = txtServiceName.getText();
        String subDomain = txtSubdomain.getText();
        String port = txtPort.getText();


        if (Objects.equals(serviceName, "") || Objects.equals(subDomain, "") || Objects.equals(port, "") || Objects.equals(fileUpload, null)) {
            javax.swing.JOptionPane.showMessageDialog(null, "Error", "There are empty fields", javax.swing.JOptionPane.ERROR_MESSAGE);
        } else {
            if (Objects.equals(serviceName, subDomain)) {
                ObjectMapper mapper = new ObjectMapper();

                CreateWebServiceRequest createWebServiceRequest = new CreateWebServiceRequest(serviceName, port, subDomain, username);
                ApiConstructor<CreateWebServiceRequest> api = new ApiConstructor<>("create webservice", createWebServiceRequest);
                String jsonRequest = mapper.writeValueAsString(api);
                System.out.println("json gửi trước: " + jsonRequest);
                client.getOut().write(jsonRequest.getBytes(StandardCharsets.UTF_8));
                client.getOut().flush();

//            Gửi file
                byte[] fileData = Files.readAllBytes(Paths.get(fileUpload.getAbsolutePath()));
                DataOutputStream out = new DataOutputStream(client.getOut());
                out.writeLong(fileData.length);
                out.write(fileData);

//                RESPONSE
                byte[] buffer = new byte[1024];
                int bytesRead = client.getIn().read(buffer);
                String jsonResponse = new String(buffer, 0, bytesRead, StandardCharsets.UTF_8);
//            JSON => Text
                JsonNode rootNode = mapper.readTree(jsonResponse);
                String message = rootNode.get("message").asText();
                if(Objects.equals(message, "Success")){
                    JOptionPane.showMessageDialog(this, "Creating a successful web service", "Information!", JOptionPane.INFORMATION_MESSAGE);
                    this.setVisible(false);
                    this.webServiceGUI.setEnabled(true);
                    this.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
                    this.dispose();
                }else{
                    txtServiceName.setText("");
                    txtSubdomain.setText("");
                    txtPort.setText("");
                    JOptionPane.showMessageDialog(null, "Creating a web service is failed!", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                javax.swing.JOptionPane.showMessageDialog(null, "Error", "Service name and Subdomain must be similar", javax.swing.JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void btnUploadFileActionPerformed(java.awt.event.ActionEvent evt) {
        JnaFileChooser chooser = new JnaFileChooser();
        chooser.addFilter("JAR", "jar");
        boolean action = chooser.showOpenDialog(this);
        if (action) {
            fileUpload = chooser.getSelectedFile();
        }
    }


//    public static void sendFileInChunks(String serviceName, String port, String subDomain, String username, File file, OutputStream clientOut) throws IOException {
//        byte[] fileBytes = Files.readAllBytes(file.toPath());
//        int chunkSize = (1024 * 2);  // 2K mỗi phần
//        int totalChunks = (int) Math.ceil((double) fileBytes.length / chunkSize);
//        ObjectMapper mapper = new ObjectMapper();
//
////        Gửi phần đầu để báo hiệu
//        CreateWebServiceRequest createWebServiceRequest = new CreateWebServiceRequest(serviceName, port, subDomain, totalChunks, username);
//        ApiConstructor<CreateWebServiceRequest> api = new ApiConstructor<>("create webservice", createWebServiceRequest);
//        String jsonRequest = mapper.writeValueAsString(api);
//        System.out.println("json gửi trước: " + jsonRequest);
//        clientOut.write(jsonRequest.getBytes(StandardCharsets.UTF_8));
//        clientOut.flush();
//        Map<Integer, byte[]> chunks = new TreeMap<>();
////        Gửi nội dung file
//        for (int i = 0; i < totalChunks; i++) {
//            int start = i * chunkSize;
//            int end = Math.min(start + chunkSize, fileBytes.length);
//            byte[] chunk = Arrays.copyOfRange(fileBytes, start, end);
//
//            // Mã hóa Base64
//            Base64 Base64 = null;
//            String chunkBase64 = Base64.getEncoder().encodeToString(chunk);
//            byte[] chunkd = Base64.getDecoder().decode(chunkBase64);
//
//            // Gửi mỗi phần dưới dạng JSON
//            FileContentRequest fileContentRequest = new FileContentRequest(i + 1, chunkBase64);
//            ApiConstructor<FileContentRequest> apiConstructor = new ApiConstructor<>("file content", fileContentRequest);
//            String fileContentJsonRequest = mapper.writeValueAsString(apiConstructor);
//
//            System.out.println("json Request part " + (i + 1) + ": " + fileContentJsonRequest);
//            chunks.put(i + 1, chunkd);
//
//
//            clientOut.write((fileContentJsonRequest + "\n").getBytes(StandardCharsets.UTF_8));
//            clientOut.flush();
//        }
//
//        // Mở file đầu ra để ghi
//        try (BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream("src/main/resources/truongcongly/" + serviceName + ".jar"))) {
//            // Duyệt qua các phần tử trong TreeMap theo thứ tự tăng dần của khóa (Integer)
//            for (Map.Entry<Integer, byte[]> entry : chunks.entrySet()) {
//                byte[] chunkData = entry.getValue();
//                // Ghi từng phần dữ liệu vào file
//                bos.write(chunkData);
//            }
//        }
//
////         Gửi chuỗi "EOF" để báo hiệu kết thúc gửi file
//        ApiConstructor<String> apiConstructor = new ApiConstructor<>("End Of File", "EOF");
//        String eof = mapper.writeValueAsString(apiConstructor);
//        clientOut.write((eof + "\n").getBytes(StandardCharsets.UTF_8));
//        clientOut.flush();
//        System.out.println(eof);
//    }


    // Variables declaration - do not modify
    private javax.swing.JButton btnConfirm;
    private javax.swing.JButton btnUploadFile;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JTextField txtDomainName;
    private javax.swing.JTextField txtPort;
    private javax.swing.JTextField txtServiceName;
    private javax.swing.JTextField txtSubdomain;
    // End of variables declaration
}
